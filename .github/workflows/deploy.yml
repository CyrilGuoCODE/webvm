name: Deploy

on:
  workflow_dispatch:
    inputs:
      DOCKERFILE_PATH:
        type: string
        description: 'Path to the Dockerfile'
        required: true
        default: 'dockerfiles/debian_mini'
      IMAGE_SIZE:
        type: string
        description: 'Image size, 950M max'
        required: true
        default: '600M'
      DEPLOY_TO_GITHUB_PAGES:
        type: boolean
        description: 'Deploy to Github pages'
        required: true
        default: true
      GITHUB_RELEASE:
        type: boolean
        description: 'Upload GitHub release'
        required: true
        default: false

jobs:
  guard_clause:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      actions: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: DOCKERFILE_PATH.
        shell: bash
        run: |
          if [ ! -f ${{ github.event.inputs.DOCKERFILE_PATH }} ]; then
              echo "::error title=Invalid Dockerfile path::No file found at ${{ github.event.inputs.DOCKERFILE_PATH }}"
              echo "terminate=true" >> $GITHUB_ENV
          fi
      - name: Github Pages config guard clause
        if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
        run: |
          set +e
          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository_owner }}/$(basename ${{ github.repository }})/pages > pages_response
          if [ "$?" -ne 0 ]; then
            echo "::error title=Potential pages configuration error.::Please make sure you have enabled Github pages for the ${{ github.repository }} repository. If already enabled then Github pages might still be in the process of being set up."
            echo "terminate=true" >> $GITHUB_ENV
          fi
          set -e
          if [[ "$(jq --compact-output --raw-output .build_type pages_response)" != "workflow" ]]; then
              echo "Undefined behaviour, Make sure the Github Pages source is correctly configured in the Github Pages settings."
              echo "::error title=Pages configuration error.::Please make sure you have correctly picked \"Github Actions\" as the build and deployment source for the Github Pages."
              echo "terminate=true" >> $GITHUB_ENV
          fi
          rm pages_response
      - name: Terminate run if error occurred.
        run: |
          if [[ $terminate == "true" ]]; then
            gh run cancel ${{ github.run_id }}
            gh run watch ${{ github.run_id }}
          fi

  build:
    needs: guard_clause
    runs-on: ubuntu-latest
    env:
      TAG: "ext2-webvm-base-image"
      IMAGE_SIZE: '${{ github.event.inputs.IMAGE_SIZE }}'
      DEPLOY_DIR: /webvm_deploy/
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Generate the image_name.
        id: image_name_gen
        run: |
          echo "IMAGE_NAME=$(basename ${{ github.event.inputs.DOCKERFILE_PATH }})_$(date +%Y%m%d)_${{ github.run_id }}.ext2" >> $GITHUB_ENV
      - run: sudo mkdir -p $DEPLOY_DIR
      - run: docker build . --tag $TAG --file ${{ github.event.inputs.DOCKERFILE_PATH }} --platform=i386
      - run: |
          docker run --dns 8.8.8.8 --dns 8.8.4.4 -d $TAG
          echo "CONTAINER_ID=$(sudo docker ps -aq)" >> $GITHUB_ENV
      - name: Extracting CMD / Entrypoint and args
        shell: bash
        run: |
          cmd=$(sudo docker inspect --format='{{json .Config.Cmd}}' $CONTAINER_ID)
          entrypoint=$(sudo docker inspect --format='{{json .Config.Entrypoint}}' $CONTAINER_ID)
          if [[ $entrypoint != "null" && $cmd != "null" ]]; then
            echo "CMD=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.Entrypoint' )" >> $GITHUB_ENV
            echo "ARGS=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.Cmd' )" >> $GITHUB_ENV
          elif [[ $cmd != "null" ]]; then
            echo "CMD=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.Cmd[:1]' )" >> $GITHUB_ENV
            echo "ARGS=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.Cmd[1:]' )" >> $GITHUB_ENV
          else
            echo "CMD=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.Entrypoint[:1]' )" >> $GITHUB_ENV
            echo "ARGS=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.Entrypoint[1:]' )" >> $GITHUB_ENV
          fi
      - name: Extracting env, args and cwd.
        shell: bash
        run: |
          echo "ENV=$( sudo docker inspect $CONTAINER_ID | jq --compact-output  '.[0].Config.Env' )" >> $GITHUB_ENV
          echo "CWD=$( sudo docker inspect $CONTAINER_ID | jq --compact-output '.[0].Config.WorkingDir' )" >> $GITHUB_ENV
      - name: Create ext2 image.
        run: |
         sudo fallocate -l $IMAGE_SIZE ${IMAGE_NAME}
         sudo mkfs.ext2 -r 0 ${IMAGE_NAME}
         sudo mount -o loop -t ext2 ${IMAGE_NAME} /mnt/
      - name: Export and unpack container filesystem contents into mounted ext2 image.
        run: |
          sudo docker cp -a ${CONTAINER_ID}:/ /mnt/
          sudo umount /mnt/
      - name: Generate image split chunks and .meta file
        run: |
          sudo split ${{ env.IMAGE_NAME }} ${{ env.DEPLOY_DIR }}/${{ env.IMAGE_NAME }}.c -a 6 -b 128k -x --additional-suffix=.txt
          sudo bash -c "stat -c%s ${{ env.IMAGE_NAME }} > ${{ env.DEPLOY_DIR }}/${{ env.IMAGE_NAME }}.meta"
      - name: Adjust config_github_terminal.js
        run: |
          sed -i 's#IMAGE_URL#"${{ env.IMAGE_NAME }}"#g' config_github_terminal.js
          sed -i 's#CMD#${{ env.CMD }}#g' config_github_terminal.js
          sed -i 's#ARGS#${{ env.ARGS }}#g' config_github_terminal.js
          sed -i 's#ENV#${{ env.ENV }}#g' config_github_terminal.js
          sed -i 's#CWD#${{ env.CWD }}#g' config_github_terminal.js
      - name: Build NPM package
        run: |
          npm install
          WEBVM_MODE=github npm run build
      - name: Copy build
        run: |
          rm build/alpine.html
          sudo mv build/* $DEPLOY_DIR/
      - name: make index.list
        shell: bash
        run: |
          find $DEPLOY_DIR -type d | while read -r dir;
          do
            index_list="$dir/index.list";
            sudo rm -f "$index_list";
            sudo ls "$dir" | sudo tee "$index_list" > /dev/null;
            sudo chmod +rw "$index_list";     
            sudo echo "created $index_list"; 
          done
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ env.DEPLOY_DIR }}
      - name: github release
        if: ${{ github.event.inputs.GITHUB_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          target_commitish: ${{ github.sha }}
          tag_name: ext2_image
          fail_on_unmatched_files: 'true'
          files: |
            ${{ env.IMAGE_NAME }}

  deploy_to_github_pages:
    if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Deploy GitHub Pages site
        id: deployment
        uses: actions/deploy-pages@v4
